<html>
  <head>
    <title>Edit Report</title>
    <script src="/<%= settings.dm_js_location %>/ag-grid-enterprise.js" type="text/javascript"></script>
    <script src="/<%= settings.dm_js_location %>/crossbeams-grid-loader.js" type="text/javascript"></script>
    <script src="/<%= settings.dm_js_location %>/crossbeams_utils.js" type="text/javascript"></script>
    <link rel="stylesheet" href="/stylesheets/crossbeams-layout.css">
</head>
<body>
<h1>Edit report</h1>
<%= menu(true) %>

<h2><%= @rpt.caption %></h2>
caption
limit
offset
no pivot, other global grid options...

<button onclick="crossbeamsUtils.toggle_visibility('sql_code');return false">Toggle SQL</button>
<button >Change SQL</button>
<pre id="sql_code" style="display:none;"><%= sql_to_highlight(@rpt.runnable_sql) %></pre>
<hr>

<h3>Columns</h3>
<div style="height:20em">
  <div class="grid-head">
    <label style="margin-left: 20px;">
      <button onclick="crossbeamsGridEvents.csvExport('grd1', '<%= @rpt.caption.gsub(/[\/:*?"\\<>\|\r\n]/i, '-') %> columns.csv')">Export to CSV</button>
    </label>
    <label style="margin-left: 20px;">
      <button onclick="crossbeamsGridEvents.toggleToolPanel('grd1')">Tool panel</button>
    </label>
    <label style="margin-left: 20px;">
      <input onkeyup="crossbeamsGridEvents.quickSearch(event)" placeholder='Search...' data-grid-id="grd1"/>
    </label>
    <%= @rpt.caption %>
  </div>
  <div id="grd1" style="height: 100%;" class="ag-blue"></div>
</div>

<h3>Parameters</h3>
<div style="height:20em">
  <div class="grid-head">
    <label style="margin-left: 20px;">
      <button onclick="crossbeamsGridEvents.csvExport('grd2', '<%= @rpt.caption.gsub(/[\/:*?"\\<>\|\r\n]/i, '-') %> parameters.csv')">Export to CSV</button>
    </label>
    <label style="margin-left: 20px;">
      <button onclick="crossbeamsGridEvents.toggleToolPanel('grd2')">Tool panel</button>
    </label>
    <label style="margin-left: 20px;">
      <input onkeyup="crossbeamsGridEvents.quickSearch(event)" placeholder='Search...' data-grid-id="grd2"/>
    </label>
    <%= @rpt.caption %>
  </div>
  <div id="grd2" style="height: 100%;" class="ag-blue"></div>
</div>


<script>

(function() {
  //var loadGrid;
  var onBtExport;

  translateColDefs = function(columnDefs) {
    //console.log(columnDefs);
    var newColDefs = [], col, newCol, fn;
    for (_i = 0, _len = columnDefs.length; _i < _len; _i++) {
      col = columnDefs[_i];
      newCol = {};
      for(attr in col) {
        if(attr==='cellRenderer') {
          //fn = window[col[attr]];
          //newCol[attr] = fn;
          //newCol[attr] = eval(col[attr]);
          if(col[attr] ==='crossbeamsGridFormatters.testRender') {
            newCol[attr] = crossbeamsGridFormatters.testRender;
          }
          if(col[attr] ==='crossbeamsGridFormatters.numberWithCommas2') {
            newCol[attr] = crossbeamsGridFormatters.numberWithCommas2;
          }
          if(col[attr] ==='crossbeamsGridFormatters.numberWithCommas4') {
            newCol[attr] = crossbeamsGridFormatters.numberWithCommas4;
          }
          if(col[attr] ==='crossbeamsGridFormatters.booleanFormatter') {
            newCol[attr] = crossbeamsGridFormatters.booleanFormatter;
          }
          if(col[attr] ==='crossbeamsGridFormatters.hrefInlineFormatter') {
            newCol[attr] = crossbeamsGridFormatters.hrefInlineFormatter;
          }
          if(col[attr] ==='crossbeamsGridFormatters.hrefSimpleFormatter') {
            newCol[attr] = crossbeamsGridFormatters.hrefSimpleFormatter;
          }
          if(col[attr] ==='crossbeamsGridFormatters.hrefPromptFormatter') {
            newCol[attr] = crossbeamsGridFormatters.hrefPromptFormatter;
          }

        }
        else {
          if(attr==='cellEditor') {
            console.log('edit');
            if(col[attr] ==='NumericCellEditor') {
            console.log('edit - NUM');
              newCol[attr] = NumericCellEditor;
            }
          }
          else {
            newCol[attr] = col[attr];
          }
        }
      }
      newColDefs.push(newCol);
    }
    return newColDefs;
  };



// node: The grid node in question.
// data: The row data in question.
// oldValue: If 'field' is in the column definition, contains the value in the data before the edit.
// newValue: The string value entered into the default editor.
// rowIndex: The index of the virtualised row.
// colDef: The column definition.
// context: The context as set in the gridOptions.
// api: A reference to the ag-Grid API.
      var grid, gridOptions, grid_id, colDefs, rowDefs;
      colDefs = translateColDefs(<%= @col_defs.to_json %>),
      rowDefs = <%= @row_defs.to_json %>,
      grid = document.querySelector('#grd1');
      grid_id = grid.getAttribute('id');
      //for_print = grid.dataset.gridPrint;
      gridOptions = {
        columnDefs: colDefs,
        rowData: rowDefs,
        context: {
          saveUrl: '<%= @save_url %>',
          keyColumn: 'name'
              },
                enableColResize: true,
                enableSorting: true,
                enableFilter: true,
                suppressScrollLag: true,
                enableRangeSelection: true,
                enableStatusBar: true,
                suppressAggFuncInHeader: true,
        toolPanelSuppressPivotMode: true,
        onCellValueChanged: function(event) {
          if(event.oldValue === event.newValue) {
            console.log('NOCHANGE!');
          } else {
            console.log('url: ' + event.context.saveUrl + 'key: ' + event.context.keyColumn + '=' + event.data[event.context.keyColumn] + ', col: '+ event.context.keyColumn + '='+event.data[event.context.keyColumn]+'&' + event.colDef.field + '=' + event.newValue);
            var http = new XMLHttpRequest();
            var url = event.context.saveUrl;
            var params = 'key_name=' +event.context.keyColumn + '&key_val='+event.data[event.context.keyColumn]+'&col_name=' + event.colDef.field + '&col_val=' + event.newValue;
                        // kecol, keyval, colname, colval
            http.open("POST", url, true);

            //Send the proper header information along with the request
            http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

            http.onreadystatechange = function() {//Call a function when the state changes.
                if(http.readyState == 4 && http.status == 200) {
                    console.log(http.responseText);
                }
            }
            http.send(params);

          }
        },
              };

      new agGrid.Grid(grid, gridOptions);
      crossbeamsGridStore.addGrid(grid_id, gridOptions);

      colDefs = translateColDefs(<%= @col_defs_params.to_json %>),
      rowDefs = <%= @row_defs_params.to_json %>,
      grid = document.querySelector('#grd2');
      grid_id = grid.getAttribute('id');
      //for_print = grid.dataset.gridPrint;
      gridOptions = {
        columnDefs: colDefs,
        rowData: rowDefs,
                enableColResize: true,
                enableSorting: true,
                enableFilter: true,
                suppressScrollLag: true,
                enableRangeSelection: true,
                enableStatusBar: true,
        suppressAggFuncInHeader: true,
        toolPanelSuppressPivotMode: true
              };

      new agGrid.Grid(grid, gridOptions);
      crossbeamsGridStore.addGrid(grid_id, gridOptions);

      //loadGrid(grid, gridOptions);
  }).call(this);
</script>

</body>
</html>
