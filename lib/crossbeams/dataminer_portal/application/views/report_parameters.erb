<h1>Fill in parameters</h1>
<%= @menu %>
<h2><%= @rpt.caption %></h2>

<form action='<%= @report_action %>' id="rp_form" method=post class="pure-form pure-form-aligned" onsubmit="addJSONVarToForm('rp_form', current_values);">
  <div class="pure-g">
    <div class="pure-u-1">
      <div class="field pure-control-group">
        <label for="limit">Limit</label>
        <input id="limit" type="number" name='limit' min="1" value="<%= @rpt.limit %>" />
      </div>
      <div class="field pure-control-group">
        <label for="offset">Start from (offset)</label>
        <input id="offset" type="number" name='offset' min="1" value="<%= @rpt.offset %>" />
      </div>

      <h3>Choose parameters</h3>
      <select id="select_param">
        <option value="">Select a parameter to apply</option>
        <%= make_options(@qps.map { |qp| [qp.caption, qp.column] }) %>
      </select>
      <div id="qp_form" style="display:inline-block"></div>
      <div id="param_display"></div>

      <div class="actions pure-controls">
        <button type='submit' id="run_excel" name="btnSubmit" formaction="<%= @excel_action %>" data-disable-with="Create Excel report" class="pure-button pure-button"><i class="fa fa-file-excel-o"></i> Download Excel report</button>
        <input type="submit" name="btnSubmit" value="Run report" data-disable-with="Run report" class="pure-button pure-button-primary">
      </div>
    </div>
  </div>
</form>
  <script>
    var getListIndex = function(node) {
        var childs = node.parentNode.childNodes;
        for (i = 0; i < childs.length; i++) {
              if (node == childs[i]) break;
            }
        return i;
    };
    var removeQueryParamItem = function(node) {
      var index = getListIndex(node);
      current_values.splice(index, 1);
      node.parentNode.removeChild(node);
    };
    var queryItemAsText = function(item) {
      return '<li style="list-style-type:none;"><i class="fa fa-minus" style="cursor:pointer;color:red;" onclick="removeQueryParamItem(this.parentNode)"></i> ' + item.caption + ' ' + item.opText + ' ' + item.text;
    };
    var querySelectionAsText = function(param_values) {
      if(param_values.length === 0) {
        return '<li style="list-style-type:none;">None selected</li>';
      }
      else {
        var items = [];
        for(var i=0;i<param_values.length;i++) {
          items.push(queryItemAsText(param_values[i]));
        }
        return items.join('');
      }
    };
    var addJSONVarToForm = function(formId, jsonVar) {
      var form = document.getElementById(formId);
      var element1 = document.createElement("input");
      element1.type = "hidden";
      element1.value = JSON.stringify(jsonVar);
      element1.name = "json_var";
      form.appendChild(element1);
    };

  var query_params = <%= make_query_param_json(@qps) %>;
  var current_values = [];
  var makeSelect = function(name, arr) {
    var sel = '<select id="' + name + '" name="' + name + '">';
    console.log(arr[0]);
    for(var i=0;i<arr.length;i++) {
      if(arr[i].constructor === Array) {
        sel += '<option value="' + (arr[i][1] || arr[i][0]) + '">' + arr[i][0] + '</option>';
      }
      else {
        sel += '<option value="' + arr[i] + '">' + arr[i] + '</option>';
      }
    }
    sel += '</select>';
    return sel;
  };
  var containsObject = function(obj, list) {
    var i,hld;
    for (i = 0; i < list.length; i++) {
      hld = list[i];
      //if (list[i] == obj) {
      if (hld.col === obj.col && hld.op === obj.op && hld.val === obj.val) { // TODO: range of vals etc...
        return true;
      }
    }

    return false;
  };
  var displayParamsAsText = function() {
    var disp = '<ul>';
    disp += querySelectionAsText(current_values);
    disp += '</ul>';
    document.getElementById('param_display').innerHTML = disp;
  };

  var addQpFormParam = function() {
    var choice = {};
    var valElem = document.getElementById('qp_value'); // And 2nd val if between...
    choice.col  = document.getElementById('qp_column').value;
    choice.op   = document.getElementById('qp_operator').value;
    choice.opText = document.getElementById('qp_operator').options[document.getElementById('qp_operator').selectedIndex].text;
    choice.val  = valElem.value;
    var qp = query_params[choice.col];
    if(qp.control_type === 'list') {
      choice.text = valElem.options[valElem.selectedIndex].text;
    }
    else {
      choice.text = choice.val;
    }
    choice.caption  = qp.caption;
    if(!containsObject(choice, current_values)) {
      // TODO: VALIDATE... (between needs 2 vals, val not blank etc.
      console.log(choice);
      current_values.push(choice);
      displayParamsAsText();
    }
  };

  (function() {

    document.getElementById("select_param").addEventListener('change', function (event) {
      var val = event.target.value, qp, val_input;
      var qpForm = document.getElementById("qp_form");
      // Form should maybe popup?
      if(val ==='') {
        qpForm.innerHTML = '';
      }
      else {
        qp = query_params[val];
        console.log('SHOW', val);
        //qpForm.innerHTML = 'SHOW ' + val; // Build form from rules in query_params....
        if(qp.control_type === 'list') {
          val_input = makeSelect('qp_value', qp.list_values);
        }
        else {
          val_input = '<input name="qp_value" id="qp_value" value="'+ (qp.default_value === null ? '' : qp.default_value) +'" />'
        }
        qpForm.innerHTML = '<form id="dForm" action="#">' + '<input type="hidden" id="qp_column" value="' + qp.column + '" />' +
          //'<label>' + qp.caption + '</label>' +
          makeSelect('qp_operator', qp.operator) +
          //val_input +'<button type="button" onclick="console.log(new FormData(document.getElementById(\'qp_form\')))"><i class="fa fa-plus"></i></button></form>';
          val_input +'<button type="button" class="pure-button pure-button" onclick="addQpFormParam()"><i class="fa fa-plus"></i></button></form>';
      }
            // event.stopPropagation();
            // event.preventDefault();
    });

    displayParamsAsText();

  }).call(this);

// var current_values (for use in re-submit)
// var text_representation -- current_values passed through function.
// 1) Listen for change of select_param.
// 2) On change, build form for choosing value & bring in existing choice for change.
// 3) On submit, add to json list of values and build up text representation of values.
</script>
